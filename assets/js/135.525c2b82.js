(window.webpackJsonp=window.webpackJsonp||[]).push([[135],{449:function(s,t,a){"use strict";a.r(t);var n=a(6),e=Object(n.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"集合概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合概述"}},[s._v("#")]),s._v(" 集合概述")]),s._v(" "),t("h3",{attrs:{id:"java集合概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java集合概述"}},[s._v("#")]),s._v(" Java集合概述")]),s._v(" "),t("p",[s._v("      Java集合，也叫作"),t("code",[s._v("容器")]),s._v("，主要由两大接口派生而来：一个是"),t("code",[s._v("Collection")]),s._v("接口，主要用于存放单一元素；另一个"),t("code",[s._v("Map")]),s._v("接口，主要用于存放键值对。对于"),t("code",[s._v("Collection")]),s._v("接口，下面又有三个主要的子接口："),t("code",[s._v("List")]),s._v("、"),t("code",[s._v("Set")]),s._v("和"),t("code",[s._v("Queue")]),s._v(".")]),s._v(" "),t("p",[s._v("Java集合框架如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220804114354323.png",alt:"image-20220804114354323"}})]),s._v(" "),t("p",[s._v("注：图中只列举了主要的继承派生关系，并没有列举所有关系。比方省略了"),t("code",[s._v("AbstractList")]),s._v(", "),t("code",[s._v("NavigableSet")]),s._v("等抽象类以及其他的一些辅助类，如想深入了解，可自行查看源码。")]),s._v(" "),t("h3",{attrs:{id:"说说-list-set-queue-map-四者的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说说-list-set-queue-map-四者的区别"}},[s._v("#")]),s._v(" 说说 List, Set, Queue, Map 四者的区别？")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("List")]),s._v("(对付顺序的好帮手)：存储的元素是有序的、可重复的。")]),s._v(" "),t("li",[t("code",[s._v("Set")]),s._v("（注重独一无二的性质）：存储的元素是无序的、不可重复的。")]),s._v(" "),t("li",[t("code",[s._v("Queue")]),s._v("（实现排队功能的叫号机）：按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。")]),s._v(" "),t("li",[t("code",[s._v("Map")]),s._v('（用Key来搜索的专家）：使用键值对（Key-value）存储，类似于数学上的函数y = f（x），"x"代表key，"y"代表value，key是无序的、不可重复的，value是无序的、可重复的，每个键最多映射到一个值。')])]),s._v(" "),t("h3",{attrs:{id:"集合框架底层数据结构总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#集合框架底层数据结构总结"}},[s._v("#")]),s._v(" 集合框架底层数据结构总结")]),s._v(" "),t("p",[s._v("先来看一下 "),t("code",[s._v("Collection")]),s._v(" 接口下面的集合。")]),s._v(" "),t("h4",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" List")]),s._v(" "),t("ul",[t("li",[t("p",[t("code",[s._v("ArrayList")]),s._v("："),t("code",[s._v("Object[]")]),s._v("数组")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("Vector")]),s._v("："),t("code",[s._v("Object[]")]),s._v("数组")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("LinkedList")]),s._v("：双向链表（JDK1.6之前为循环链表，JDK1.7取消了循环）")])])]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220804130235565.png",alt:"image-20220804130235565"}})]),s._v(" "),t("h4",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" Set")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("HashSet")]),s._v("(无序、唯一)：基于"),t("code",[s._v("HashMap")]),s._v("实现的，低层采用"),t("code",[s._v("HashMap")]),s._v("来保存元素")]),s._v(" "),t("li",[t("code",[s._v("LinkedHashSet")]),s._v("："),t("code",[s._v("LinkedHashSet")]),s._v("是"),t("code",[s._v("HahSet")]),s._v("的子类，并且其内部是通过"),t("code",[s._v("LinkedHashMap")]),s._v("来实现的。有点类似与我们之前说的"),t("code",[s._v("LinkedHashMap")]),s._v("其内部基于"),t("code",[s._v("HashMap")]),s._v("实现一样，不过还是有一点点区别的。")]),s._v(" "),t("li",[t("code",[s._v("TreeSet")]),s._v("(有序，唯一)：红黑树（自平衡的排序二叉树）")])]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220804133043967.png",alt:"image-20220804133043967"}})]),s._v(" "),t("h4",{attrs:{id:"queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[s._v("#")]),s._v(" Queue")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("PriorityQueue")]),s._v("："),t("code",[s._v("Object[]")]),s._v("数组来实现二叉堆")]),s._v(" "),t("li",[t("code",[s._v("ArrayQueue")]),s._v("："),t("code",[s._v("Object[]")]),s._v("数组+双指针")])]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220804133607263.png",alt:"image-20220804133607263"}})]),s._v(" "),t("h4",{attrs:{id:"map"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" Map")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("HashMap")]),s._v("： JDK1.8 之前 "),t("code",[s._v("HashMap")]),s._v(" 由数组+链表组成的，数组是 "),t("code",[s._v("HashMap")]),s._v(" 的主体，链表则是主要为了解决哈希冲突而存在的（“拉链法”解决冲突）。JDK1.8 以后在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间")]),s._v(" "),t("li",[t("code",[s._v("LinkedHashMap")]),s._v("： "),t("code",[s._v("LinkedHashMap")]),s._v(" 继承自 "),t("code",[s._v("HashMap")]),s._v("，所以它的底层仍然是基于拉链式散列结构即由数组和链表或红黑树组成。另外，"),t("code",[s._v("LinkedHashMap")]),s._v(" 在上面结构的基础上，增加了一条双向链表，使得上面的结构可以保持键值对的插入顺序。同时通过对链表进行相应的操作，实现了访问顺序相关逻辑。详细可以查看："),t("a",{attrs:{href:"https://www.imooc.com/article/22931",target:"_blank",rel:"noopener noreferrer"}},[s._v("《LinkedHashMap 源码详细分析（JDK1.8）》"),t("OutboundLink")],1)]),s._v(" "),t("li",[t("code",[s._v("Hashtable")]),s._v("： 数组+链表组成的，数组是 "),t("code",[s._v("Hashtable")]),s._v(" 的主体，链表则是主要为了解决哈希冲突而存在的")]),s._v(" "),t("li",[t("code",[s._v("TreeMap")]),s._v("： 红黑树（自平衡的排序二叉树）")])]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220804133924037.png",alt:"image-20220804133924037"}})]),s._v(" "),t("h3",{attrs:{id:"如何选择集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何选择集合"}},[s._v("#")]),s._v(" 如何选择集合？")]),s._v(" "),t("p",[s._v("      主要根据集合的特点来选用，比如我们需要根据键值获取元素值就是用"),t("code",[s._v("Map")]),s._v("接口下的集合，需要排序时选择"),t("code",[s._v("TreeMap")]),s._v("，不需要排序时就选择"),t("code",[s._v("HashMap")]),s._v("，需要保护线程安全就使用"),t("code",[s._v("ConcurrentHashMap")]),s._v("。")]),s._v(" "),t("p",[s._v("      当我们只需要存放元素时，就选择"),t("code",[s._v("Collection")]),s._v("接口的集合，需要保证元素唯一时选择实现"),t("code",[s._v("Set")]),s._v("接口的集合比如"),t("code",[s._v("TreeSet")]),s._v("或"),t("code",[s._v("HashSet")]),s._v("，不需要就选择实现"),t("code",[s._v("List")]),s._v("接口的比如"),t("code",[s._v("ArrayList")]),s._v("或"),t("code",[s._v("LinkedList")]),s._v("，然后再根据实现这些接口的集合的特点来选用。")]),s._v(" "),t("h3",{attrs:{id:"为什么要使用集合"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要使用集合"}},[s._v("#")]),s._v(" 为什么要使用集合？")]),s._v(" "),t("p",[s._v('      当我们需要保存一组类型相同的数据的时候，我们应该是用一个容器来保存，这个容器就是数组，但是，使用数组存对象有一定弊端，因为我们在实际开发中，存储的数据的类型是多种多样的，于是，就出现了"集合"，集合同样也是用来存储多个数据的。')]),s._v(" "),t("p",[s._v("      数组的缺点是一旦声明之后，长度就不可变了；同时，声明数组的数据类型也决定了该数组存储的数据的类型；而且，数组存储的数据是有序的、可重复的，特点单一。但是集合提高了数据存储的灵活性，Java集合不仅可以用来存储不同类型不同数量的对象，还可以保存具有映射关系的数据。")]),s._v(" "),t("h2",{attrs:{id:"collection-子接口之-list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-list"}},[s._v("#")]),s._v(" Collection 子接口之 List")]),s._v(" "),t("h3",{attrs:{id:"arraylist-和-vector-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-vector-的区别"}},[s._v("#")]),s._v(" ArrayList 和 Vector 的区别?")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ArrayList")]),s._v("是"),t("code",[s._v("List")]),s._v("的主要实现类，底层使用"),t("code",[s._v("Object[]")]),s._v("存储，适用于频繁的查找工作，线程不安全；")]),s._v(" "),t("li",[t("code",[s._v("Vector")]),s._v("是"),t("code",[s._v("List")]),s._v("的古老实现类，低层使用"),t("code",[s._v("Object[]")]),s._v("存储，线程安全。")])]),s._v(" "),t("h3",{attrs:{id:"arraylist-和-linkedlist的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-和-linkedlist的区别"}},[s._v("#")]),s._v(" ArrayList 和 LinkedList的区别?")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("是否保证线程安全：")]),t("code",[s._v("ArrayList")]),s._v("和"),t("code",[s._v("LinkedList")]),s._v("都是不同步的，也就是不保证线程安全；")]),s._v(" "),t("li",[t("strong",[s._v("底层数据结构：")]),t("code",[s._v("ArrayList")]),s._v("低层使用的是"),t("code",[s._v("Object")]),t("strong",[s._v("数组")]),s._v("；"),t("code",[s._v("LinkedList")]),s._v("低层使用的是"),t("strong",[s._v("双向链表")]),s._v("数据结构（DK1.6 之前为循环链表，JDK1.7 取消了循环。注意双向链表和双向循环链表的区别，下面有介绍到）")]),s._v(" "),t("li",[t("strong",[s._v("插入和删除是否受元素位置的影响：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ArrayList")]),s._v("采用数组存储，所以插入和删除元素的时间复杂度受元素位置的影响。比如：执行"),t("code",[s._v("add(E e)")]),s._v("方法的时候，"),t("code",[s._v("ArrayList")]),s._v("会默认在将指定的元素追加到此列表的末尾，这种情况时间复杂度就是O(1)。但是如果要在指定位置i插入和删除元素的话("),t("code",[s._v("add(int index,E element)")]),s._v(")时间复杂度就位O(n-i)。因为在进行上述操作的时候集合中第i和第i个元素之后的（n-i）个元素都要执行向后位/向前移一位的操作。")]),s._v(" "),t("li",[t("code",[s._v("LinkedList")]),s._v("采用链表存储，所以，如果是在头尾插入或者删除元素不受元素的位置的影响（"),t("code",[s._v("add(E e)")]),s._v("、"),t("code",[s._v("addFirst(E e)")]),s._v("、"),t("code",[s._v("addLast(E e)")]),s._v("、"),t("code",[s._v("removeFirst()")]),s._v(" 、 "),t("code",[s._v("removeLast()")]),s._v("），时间复杂度为O(n)，因为需要先移动到指定位置再插入。")])])]),s._v(" "),t("li",[t("strong",[s._v("是否支持快速随机访问：")]),t("code",[s._v("LinkedList")]),s._v("不支持高效的随机元素访问，而"),t("code",[s._v("ArrayList")]),s._v("支持。快速随机访问元素就是通过元素的序号快速获取元素对象（对应于"),t("code",[s._v("get(int index)")]),s._v("方法）。")]),s._v(" "),t("li",[t("strong",[s._v("内存空间占用：")]),t("code",[s._v("ArrayList")]),s._v("的空间浪费主要体现在list列表的结尾会预留一定的容量空间，而LinkedList的空间花费体现在它的每一个元素都需要消耗比ArrayList更多的空间（因为要存放直接后继和直接前驱以及数据）。")])]),s._v(" "),t("p",[s._v("      我们在项目中一般不会使用"),t("code",[s._v("LinkedList")]),s._v("的，需要用到"),t("code",[s._v("LinkedList")]),s._v("的场景几乎都可以使用"),t("code",[s._v("ArrayList")]),s._v("来代替，并且，性能通常会更好！就连"),t("code",[s._v("LinkedList")]),s._v("的作者约书亚·布洛克（Json Bloch）自己都说从来不会使用"),t("code",[s._v("LinkedList")]),s._v("。")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220806093213413.png",alt:"image-20220806093213413"}})]),s._v(" "),t("p",[s._v("另外，不要下意识地认为 "),t("code",[s._v("LinkedList")]),s._v(" 作为链表就最适合元素增删的场景。我在上面也说了，"),t("code",[s._v("LinkedList")]),s._v(" 仅仅在头尾插入或者删除元素的时候时间复杂度近似 O(1)，其他情况增删元素的时间复杂度都是 O(n) 。")]),s._v(" "),t("details",{staticClass:"custom-block details"},[t("summary",[s._v("补充内容:双向链表和双向循环链表")]),s._v(" "),t("p",[t("strong",[s._v("双向链表：")]),s._v(" 包含两个指针，一个 prev 指向前一个节点，一个 next 指向后一个节点。")]),s._v(" "),t("blockquote",[t("p",[s._v("另外推荐一篇把双向链表讲清楚的文章：https://juejin.cn/post/6844903648154271757")])]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220806093429292.png",alt:"image-20220806093429292"}})]),s._v(" "),t("p",[t("strong",[s._v("双向循环链表：")]),s._v(" 最后一个节点的 next 指向 head，而 head 的 prev 指向最后一个节点，构成一个环。")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Snipaste_2022-08-06_09-34-46.png",alt:"Snipaste_2022-08-06_09-34-46"}})]),s._v(" "),t("p",[t("strong",[s._v("补充内容:RandomAccess 接口")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RandomAccess")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("查看源码我们发现实际上 "),t("code",[s._v("RandomAccess")]),s._v(" 接口中什么都没有定义。所以，在我看来 "),t("code",[s._v("RandomAccess")]),s._v(" 接口不过是一个标识罢了。标识什么？ 标识实现这个接口的类具有随机访问功能。")]),s._v(" "),t("p",[s._v("在 "),t("code",[s._v("binarySearch（)")]),s._v(" 方法中，它要判断传入的 list 是否 "),t("code",[s._v("RandomAccess")]),s._v(" 的实例，如果是，调用"),t("code",[s._v("indexedBinarySearch()")]),s._v("方法，如果不是，那么调用"),t("code",[s._v("iteratorBinarySearch()")]),s._v("方法")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[s._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("binarySearch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("super")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("T")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("instanceof")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RandomAccess")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("||")]),s._v(" list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("BINARYSEARCH_THRESHOLD"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("indexedBinarySearch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("iteratorBinarySearch")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("p",[t("code",[s._v("ArrayList")]),s._v(" 实现了 "),t("code",[s._v("RandomAccess")]),s._v(" 接口， 而 "),t("code",[s._v("LinkedList")]),s._v(" 没有实现。为什么呢？我觉得还是和底层数据结构有关！"),t("code",[s._v("ArrayList")]),s._v(" 底层是数组，而 "),t("code",[s._v("LinkedList")]),s._v(" 底层是链表。数组天然支持随机访问，时间复杂度为 O(1)，所以称为快速随机访问。链表需要遍历到特定位置才能访问特定位置的元素，时间复杂度为 O(n)，所以不支持快速随机访问。，"),t("code",[s._v("ArrayList")]),s._v(" 实现了 "),t("code",[s._v("RandomAccess")]),s._v(" 接口，就表明了他具有快速随机访问功能。 "),t("code",[s._v("RandomAccess")]),s._v(" 接口只是标识，并不是说 "),t("code",[s._v("ArrayList")]),s._v(" 实现 "),t("code",[s._v("RandomAccess")]),s._v(" 接口才具有快速随机访问功能的！")])]),s._v(" "),t("h3",{attrs:{id:"说一说-arraylist-的扩容机制吧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说一说-arraylist-的扩容机制吧"}},[s._v("#")]),s._v(" 说一说 ArrayList 的扩容机制吧")]),s._v(" "),t("p",[s._v("详见笔主的这篇文章: "),t("a",{attrs:{href:"https://javaguide.cn/java/collection/arraylist-source-code.html#_3-1-%E5%85%88%E4%BB%8E-arraylist-%E7%9A%84%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E8%AF%B4%E8%B5%B7",target:"_blank",rel:"noopener noreferrer"}},[s._v("ArrayList 扩容机制分析"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"collection-子接口之-set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-set"}},[s._v("#")]),s._v(" Collection 子接口之 Set")]),s._v(" "),t("h3",{attrs:{id:"comparable-和-comparator-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator-的区别"}},[s._v("#")]),s._v(" comparable 和 Comparator 的区别")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("comparable")]),s._v("接口实际上是出自"),t("code",[s._v("java.lang")]),s._v("包，它有一个"),t("code",[s._v("comparaTo(Object obj)")]),s._v("方法用来排序")]),s._v(" "),t("li",[t("code",[s._v("comparator")]),s._v("接口实际上是出自"),t("code",[s._v("java.util")]),s._v("包，它有一个"),t("code",[s._v("compare(Object obj1,Object obj2)")]),s._v("方法用来排序")])]),s._v(" "),t("p",[s._v("      一般我们需要对一个集合使用自定义排序时，我们就要重写"),t("code",[s._v("compareTo()")]),s._v("方法或"),t("code",[s._v("compare()")]),s._v("方法，当我们需要对某一个集合实现两种排序方式，比如一个song对象中的歌名和歌手名分别采用一种排序方法的话，我们可以重写"),t("code",[s._v("compareTo()")]),s._v("方法和使用自制的"),t("code",[s._v("Comparator")]),s._v("方法或者以两个"),t("code",[s._v("Comparator")]),s._v("来实现歌名排序和歌手名排序，第二种代表我们只能使用两个参数版的"),t("code",[s._v("Collections.sort()")]),s._v("。")]),s._v(" "),t("h4",{attrs:{id:"comparator-定制排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#comparator-定制排序"}},[s._v("#")]),s._v(" Comparator 定制排序")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" arrayList "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ArrayList")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"原始数组："')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//void reverse(arrayList);反转")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("reverse")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Collections.reverse(arrayList):"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//void sort(List list),按照自然排序的升序排序")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Collections.sort(arrayList):"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//定制排序的方法")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Collections")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" o1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" o2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" o2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("o1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"定制排序后："')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("arrayList"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br")])]),t("p",[s._v("运行结果：")]),s._v(" "),t("p",[t("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220806095112352.png",alt:"image-20220806095112352"}})]),s._v(" "),t("h4",{attrs:{id:"重写-compareto-方法实现按年龄来排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重写-compareto-方法实现按年龄来排序"}},[s._v("#")]),s._v(" 重写 compareTo 方法实现按年龄来排序")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// person对象没有实现Comparable接口，所以必须实现，这样才不会出错，才可以使treemap中的数据按顺序排列")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 前面一个例子的String类已经默认实现了Comparable接口，详细可以查看String类的API文档，另外其他")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 像Integer类等都已经实现了Comparable接口，所以不需要另外实现了")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparable")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 获取\n     * @return name\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 设置\n     * @param name\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 获取\n     * @return age\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * 设置\n     * @param age\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("setAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("toString")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Person{name = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('", age = "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/**\n     * T重写compareTo方法实现按年龄来排序\n     */")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compareTo")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" o"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br")])]),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" pdata "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        pdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"张三"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"zhangsan"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        pdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"李四"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"lisi"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        pdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"王五"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wangwu"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        pdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"小红"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"xiaohong"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//得到key的值同时得到key对应的值")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Set")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" keys "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" pdata"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" key "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" keys"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("key"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("h3",{attrs:{id:"无序性和不可重复的含义是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#无序性和不可重复的含义是什么"}},[s._v("#")]),s._v(" 无序性和不可重复的含义是什么？")]),s._v(" "),t("ol",[t("li",[s._v("什么是无序性？无序性不等于随机性，"),t("span",{staticStyle:{color:"#11A8CD"}},[t("strong",[s._v("无序性是指存储的数据在底层数组中并非按照数组索引的顺序添加，而是根据数据的哈希值来决定的。")])])]),s._v(" "),t("li",[s._v("什么是不可重复性？"),t("span",{staticStyle:{color:"#11A8CD"}},[t("strong",[s._v("不可重复性是指添加的元素按照equals()判断时，返回false，需要同时重写equals()方法和HashCode()方法。")])])])]),s._v(" "),t("h3",{attrs:{id:"比较hashset、linkedhashset和treeset三者的异同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#比较hashset、linkedhashset和treeset三者的异同"}},[s._v("#")]),s._v(" 比较HashSet、LinkedHashSet和TreeSet三者的异同")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("HashSet")]),s._v("、"),t("code",[s._v("LinkedHashSet")]),s._v("和"),t("code",[s._v("TreeSet")]),s._v("的主要区别在于低层数据结构不同。"),t("code",[s._v("HashSet")]),s._v("的低层数据结构是哈希表（基于"),t("code",[s._v("HashMap")]),s._v("实现）。"),t("code",[s._v("LinkedHashSet")]),s._v("的低层数据结构是链表和哈希表，元素的插入和取出顺序满足FIFO。"),t("code",[s._v("TreeSet")]),s._v("底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。")]),s._v(" "),t("li",[s._v("底层数据结构不同导致这三者的应用场景不同。"),t("code",[s._v("HashSet")]),s._v("用于不需要保证元素插入和取出顺序的场景。"),t("code",[s._v("LinkedHashSet")]),s._v("用于保证元素的插入和取出顺序满足FIFO的场景。"),t("code",[s._v("TreeSet")]),s._v("用于支持元素自定义排序规则的场景。")])]),s._v(" "),t("h2",{attrs:{id:"collection-子接口之-queue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口之-queue"}},[s._v("#")]),s._v(" Collection 子接口之 Queue")]),s._v(" "),t("h3",{attrs:{id:"queue-与-deque-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#queue-与-deque-的区别"}},[s._v("#")]),s._v(" Queue 与 Deque 的区别")]),s._v(" "),t("p",[t("code",[s._v("Queue")]),s._v(" 是单端队列，只能从一端插入元素，另一端删除元素，实现上一般遵循 "),t("strong",[s._v("先进先出（FIFO）")]),s._v(" 规则。")]),s._v(" "),t("p",[t("code",[s._v("Queue")]),s._v(" 扩展了 "),t("code",[s._v("Collection")]),s._v(" 的接口，根据 "),t("strong",[s._v("因为容量问题而导致操作失败后处理方式的不同")]),s._v(" 可以分为两类方法: 一种在操作失败后会抛出异常，另一种则会返回特殊值。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("code",[s._v("Queue")]),s._v(" 接口")]),s._v(" "),t("th",[s._v("抛出异常")]),s._v(" "),t("th",[s._v("返回特殊值")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("插入队尾")]),s._v(" "),t("td",[s._v("add(E e)")]),s._v(" "),t("td",[s._v("offer(E e)")])]),s._v(" "),t("tr",[t("td",[s._v("删除队首")]),s._v(" "),t("td",[s._v("remove()")]),s._v(" "),t("td",[s._v("poll()")])]),s._v(" "),t("tr",[t("td",[s._v("查询队首元素")]),s._v(" "),t("td",[s._v("element()")]),s._v(" "),t("td",[s._v("peek()")])])])]),s._v(" "),t("p",[t("code",[s._v("Deque")]),s._v(" 是双端队列，在队列的两端均可以插入或删除元素。")]),s._v(" "),t("p",[t("code",[s._v("Deque")]),s._v(" 扩展了 "),t("code",[s._v("Queue")]),s._v(" 的接口, 增加了在队首和队尾进行插入和删除的方法，同样根据失败后处理方式的不同分为两类：")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("code",[s._v("Deque")]),s._v(" 接口")]),s._v(" "),t("th",[s._v("抛出异常")]),s._v(" "),t("th",[s._v("返回特殊值")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("插入队首")]),s._v(" "),t("td",[s._v("addFirst(E e)")]),s._v(" "),t("td",[s._v("offerFirst(E e)")])]),s._v(" "),t("tr",[t("td",[s._v("插入队尾")]),s._v(" "),t("td",[s._v("addLast(E e)")]),s._v(" "),t("td",[s._v("offerLast(E e)")])]),s._v(" "),t("tr",[t("td",[s._v("删除队首")]),s._v(" "),t("td",[s._v("removeFirst()")]),s._v(" "),t("td",[s._v("pollFirst()")])]),s._v(" "),t("tr",[t("td",[s._v("删除队尾")]),s._v(" "),t("td",[s._v("removeLast()")]),s._v(" "),t("td",[s._v("pollLast()")])]),s._v(" "),t("tr",[t("td",[s._v("查询队首元素")]),s._v(" "),t("td",[s._v("getFirst()")]),s._v(" "),t("td",[s._v("peekFirst()")])]),s._v(" "),t("tr",[t("td",[s._v("查询队尾元素")]),s._v(" "),t("td",[s._v("getLast()")]),s._v(" "),t("td",[s._v("peekLast()")])])])]),s._v(" "),t("p",[s._v("事实上，"),t("code",[s._v("Deque")]),s._v(" 还提供有 "),t("code",[s._v("push()")]),s._v(" 和 "),t("code",[s._v("pop()")]),s._v(" 等其他方法，可用于模拟栈。")]),s._v(" "),t("h3",{attrs:{id:"arraydeque-与-linkedlist-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque-与-linkedlist-的区别"}},[s._v("#")]),s._v(" ArrayDeque 与 LinkedList 的区别")]),s._v(" "),t("p",[t("code",[s._v("ArrayDeque")]),s._v(" 和 "),t("code",[s._v("LinkedList")]),s._v(" 都实现了 "),t("code",[s._v("Deque")]),s._v(" 接口，两者都具有队列的功能，但两者有什么区别呢？")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("ArrayDeque")]),s._v(" 是基于可变长的数组和双指针来实现，而 "),t("code",[s._v("LinkedList")]),s._v(" 则通过链表来实现。")]),s._v(" "),t("li",[t("code",[s._v("ArrayDeque")]),s._v(" 不支持存储 "),t("code",[s._v("NULL")]),s._v(" 数据，但 "),t("code",[s._v("LinkedList")]),s._v(" 支持。")]),s._v(" "),t("li",[t("code",[s._v("ArrayDeque")]),s._v(" 是在 JDK1.6 才被引入的，而"),t("code",[s._v("LinkedList")]),s._v(" 早在 JDK1.2 时就已经存在。")]),s._v(" "),t("li",[t("code",[s._v("ArrayDeque")]),s._v(" 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 "),t("code",[s._v("LinkedList")]),s._v(" 不需要扩容，但是每次插入数据时均需要申请新的堆空间，均摊性能相比更慢。")])]),s._v(" "),t("p",[s._v("从性能的角度上，选用 "),t("code",[s._v("ArrayDeque")]),s._v(" 来实现队列要比 "),t("code",[s._v("LinkedList")]),s._v(" 更好。此外，"),t("code",[s._v("ArrayDeque")]),s._v(" 也可以用于实现栈。")]),s._v(" "),t("h3",{attrs:{id:"说一说-priorityqueue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#说一说-priorityqueue"}},[s._v("#")]),s._v(" 说一说 PriorityQueue")]),s._v(" "),t("p",[t("code",[s._v("PriorityQueue")]),s._v(" 是在 JDK1.5 中被引入的, 其与 "),t("code",[s._v("Queue")]),s._v(" 的区别在于元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。")]),s._v(" "),t("p",[s._v("这里列举其相关的一些要点：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("PriorityQueue")]),s._v(" 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据")]),s._v(" "),t("li",[t("code",[s._v("PriorityQueue")]),s._v(" 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。")]),s._v(" "),t("li",[t("code",[s._v("PriorityQueue")]),s._v(" 是非线程安全的，且不支持存储 "),t("code",[s._v("NULL")]),s._v(" 和 "),t("code",[s._v("non-comparable")]),s._v(" 的对象。")]),s._v(" "),t("li",[t("code",[s._v("PriorityQueue")]),s._v(" 默认是小顶堆，但可以接收一个 "),t("code",[s._v("Comparator")]),s._v(" 作为构造参数，从而来自定义元素优先级的先后。")])]),s._v(" "),t("p",[t("code",[s._v("PriorityQueue")]),s._v(" 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第K大的数、带权图的遍历等，所以需要会熟练使用才行。")])])}),[],!1,null,null,null);t.default=e.exports}}]);