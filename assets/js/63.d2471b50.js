(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{366:function(t,s,a){"use strict";a.r(s);var v=a(6),_=Object(v.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("VO（View Object）:")]),t._v(" 视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。")]),t._v(" "),s("li",[s("strong",[t._v("DTO（Data Transfer Object）:")]),t._v(" 数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。")]),t._v(" "),s("li",[s("strong",[t._v("DO（Domain Object）:")]),t._v(" 领域对象，就是从显示世界抽象出来的有形或无形的业务实体。")]),t._v(" "),s("li",[s("strong",[t._v("PO（Persistent Object）:")]),t._v(" 持久化对象，它跟持久层（通常是关系型数据库）的数据结构形层一一对应的映射关系，如果持久层是关系型数据库，那么，数据表中的每个字段（或若干个）就对应PO的一个（或若干个）属性。")])]),t._v(" "),s("h2",{attrs:{id:"模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模型"}},[t._v("#")]),t._v(" 模型：")]),t._v(" "),s("p",[t._v("下面以一个时序图建立简单模型来描述上述对象在三层架构应用中的位置")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/image-20220811215416371.png",alt:"image-20220811215416371"}})]),t._v(" "),s("ul",[s("li",[t._v("用于发出请求（可能是填写表单），表单的数据在展示层被匹配为VO。")]),t._v(" "),s("li",[t._v("展示层把VO转换为服务层对应方法所要求的DTO，传送给服务层。")]),t._v(" "),s("li",[t._v("服务层首先根据DTO的数据结构（或重建）一个DO，调用DO的业务方法完成具体业务。")]),t._v(" "),s("li",[t._v("服务层把DO转换成持久层对应的PO（可以使用ORM工具，也可以不用），调用持久层的持久方法，把PO传递给它，完成持久化操作。")]),t._v(" "),s("li",[t._v("对一个逆向操作，如读取数据，也是用类似的方法转换和传递，略······。")])])])}),[],!1,null,null,null);s.default=_.exports}}]);