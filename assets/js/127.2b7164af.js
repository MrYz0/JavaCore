(window.webpackJsonp=window.webpackJsonp||[]).push([[127],{436:function(t,a,s){"use strict";s.r(a);var n=s(6),r=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"java概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java概述"}},[t._v("#")]),t._v(" Java概述")]),t._v(" "),a("h3",{attrs:{id:"java语言有哪些特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java语言有哪些特点"}},[t._v("#")]),t._v(" Java语言有哪些特点？")]),t._v(" "),a("ul",[a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("面向对象（封装、继承、多态）")])]),t._v("；")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("平台无关性")])]),t._v('，平台无关性具体表现在于：Java是"一次编写，到处运行（Write Once，Run any where）"的语言，因此采用Java语言编写的程序具有很好的可移植性，而保证这一点的正是Java的虚拟机机制，在引入虚拟机之后，Java语言在不同的平台上运行不需要重新编译；')]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("可靠性、安全性")])]),t._v("；")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("支持多线程")])]),t._v("。C++语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而Java语言却提供了多线程支持；")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("支持网络编程")])]),t._v(" 并且很方便。Java语言诞生本身就是为简化网络编程设计的，因此Java语言不仅支持网络编程而且很方便；")]),t._v(" "),a("li",[t._v("编译与解释并存。")])]),t._v(" "),a("h3",{attrs:{id:"java和c-有什么关系-它们有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java和c-有什么关系-它们有什么区别"}},[t._v("#")]),t._v(" Java和C++有什么关系，它们有什么区别？")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("都是")]),t._v(" "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("面向对象的语言")])]),t._v("，都支持封装、继承、多态;")]),t._v(" "),a("li",[t._v("C++"),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("支持指针")])]),t._v("，而Java "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("没有指针的概念")])]),t._v("；")]),t._v(" "),a("li",[t._v("C++支持 "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("多继承")])]),t._v(" 向对象的语言，并且还取消C/C++中的结构和联合，使编译程序更加简洁；")]),t._v(" "),a("li",[t._v("Java "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("自动进行无用内存回收操作")])]),t._v("，不再需要程序员进行手动删除，而C++中必须由程序员释放内存资源，这就增加了程序员的负担。")]),t._v(" "),a("li",[t._v("Java "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("不支持操作符重载")])]),t._v("，操作符重载则被认为是C++的突出特征；")]),t._v(" "),a("li",[t._v("Java允许预处理，但是不支持预处理器功能，所以为了实现预处理，它提供了 引入语句（import），但它与C++预处理器的功能类似；")]),t._v(" "),a("li",[t._v("Java "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("不支持缺省参数函数")])]),t._v("，而C++支持；")]),t._v(" "),a("li",[t._v('C和C++不支持字符串变量，在C和C++程序中使用"Null"终止符代表字符串的结束。在Java中字符串是用类对象（String和StringBuffer）来实现的。')]),t._v(" "),a("li",[t._v('goto语句是C和C++的"遗物"，Java不提供goto语句，虽然Java指定goto作为关键字，但是不支持它的使用，这使程序更加简洁易读；')]),t._v(" "),a("li",[t._v("Java "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("不支持C++中的自动强制类型转换")])]),t._v("，如果需要，必须由程序员显式进行强制类型转换；")])]),t._v(" "),a("h3",{attrs:{id:"jvm、jre和jdk的关系是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jvm、jre和jdk的关系是什么"}},[t._v("#")]),t._v(" JVM、JRE和JDK的关系是什么？")]),t._v(" "),a("p",[t._v("      JDK(Java Development Kit)的缩写，它是功能齐全的Java SDK，它拥有JRE所拥有的一切，还有编译器（javac）和工具（如javadoc和jdb）。它能够创建和编译程序。")]),t._v(" "),a("p",[t._v("      JRE是Java Runtime Environment缩写，它是运行已编译Java程序所需的所有内容的集合，包括Java虚拟机（JVM），Java类库，Java命令和其他的一些基础构件。但是，它不能用于创建新程序。")]),t._v(" "),a("p",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("JDK包含JRE,JRE包含JVM。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-1.png",alt:"image-20220628140800555"}})]),t._v(" "),a("h3",{attrs:{id:"什么是字节码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是字节码"}},[t._v("#")]),t._v(" 什么是字节码？")]),t._v(" "),a("blockquote",[a("p",[t._v("这个问题，面试官可以扩展提问，Java是编译执行的语言，还是解释执行的语言？")])]),t._v(" "),a("p",[t._v("      Java之所以可以“一次编译，到处运行”，一是因为JVM针对各种操作系统，平台都进行了定制，而是因为无论在什么平台，"),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("都可以编译生成固定格式的字节码（.class文件）供JVM使用")])]),t._v("。因此，也可以看出字节码对于Java生态的重要性。")]),t._v(" "),a("p",[t._v("      之所以称之为字节码，是因为 "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("字节码文件由十六进制值组成，而JVM以两个十六进制值为一组，即以字节为单位进行读取")])]),t._v("。在Java中一般是用javac命令编译源代码为字节码文件，一个.Java文件从编译到运行的示例图如图所示。")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-2.png",alt:"image-20220628141315249"}})]),t._v(" "),a("h3",{attrs:{id:"采用字节码的好处是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#采用字节码的好处是什么"}},[t._v("#")]),t._v(" 采用字节码的好处是什么？")]),t._v(" "),a("p",[t._v("      Java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可以移植的特点。所以Java程序运行比较高效，而且，由于字节码并 "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("不专对一种特定的机器")])]),t._v("，因此，Java程序无需重新编译便可在多种不同的计算机上运行。")]),t._v(" "),a("h3",{attrs:{id:"oracle-jdk-和-openjdk-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#oracle-jdk-和-openjdk-的区别是什么"}},[t._v("#")]),t._v(" Oracle JDK 和 OpenJDK 的区别是什么？")]),t._v(" "),a("ul",[a("li",[t._v("Oracle JDK版本将每三年发布一次，而OpenJDL版本每三个月发布一次；")]),t._v(" "),a("li",[t._v("OpenJDK是一个参开模型并且是完全开源的，而Oracle JDK是 OpenJDK 的一个实现，并不是完全开源。")]),t._v(" "),a("li",[t._v("Oracle JDK比 OpenJDK 更稳定。 OpenJDK 和Oracle JDK的代码几乎相同，但是Oracle JDK有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，建议选择Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是只需切换到Oracle JDK就可以解决问题；")]),t._v(" "),a("li",[t._v("在响应和JVM性能方面，Oracle JDK与 OpenJDK 相比提供了更好的性能；")]),t._v(" "),a("li",[t._v("Oracle JDK不会为即将发布的版本提供长期支持，用户每次必须通过更新到最新版本获得支持获取最新版本；")]),t._v(" "),a("li",[t._v("Oracle JDK根据二进制代码许可协议获得许可，而 OpenJDK 根据GPLv2许可获得许可。")])]),t._v(" "),a("h2",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[t._v("#")]),t._v(" 基本语法")]),t._v(" "),a("h3",{attrs:{id:"字符型常量和字符串常量的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符型常量和字符串常量的区别"}},[t._v("#")]),t._v(" 字符型常量和字符串常量的区别？")]),t._v(" "),a("ol",[a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("形式：")])]),t._v(" 字符常量是"),a("span",{staticStyle:{color:"red"}},[t._v("单引号")]),t._v("引起的一个字符，字符串常量是"),a("span",{staticStyle:{color:"red"}},[t._v("双引号")]),t._v("引起的0个或若干个字符。")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("含义：")])]),t._v(" 字符常量相当于一个整形值（ASCI值），可以参加表达式运算；字符串长常量代表一个地址值（该字符串在内存中存放位置）。")]),t._v(" "),a("li",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("占内存大小")])]),t._v("：字符常量只占2个字节；字符串常量占若干个字节。")])]),t._v(" "),a("p",[a("strong",[t._v("(注意:"),a("code",[t._v("char")]),t._v("在Java中占两个字节)")])]),t._v(" "),a("h3",{attrs:{id:"注释有哪几种形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注释有哪几种形式"}},[t._v("#")]),t._v(" 注释有哪几种形式？")]),t._v(" "),a("p",[t._v("Java中的注释有三种：1、单行注释；2、多行注释；3、文档注释")]),t._v(" "),a("p",[t._v("在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。")]),t._v(" "),a("h3",{attrs:{id:"标识符和关键字的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标识符和关键字的区别是什么"}},[t._v("#")]),t._v(" 标识符和关键字的区别是什么？")]),t._v(" "),a("p",[t._v("      标识符（identifier）是指用来标识某个实体的一个符号，在不同的应用环境下有不同的含义。"),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("在计算机编程语言中，标识符是用户编程时使用的名字，用于给变量、常量、函数、语句块、方法名等命名，以建立起名称与使用之间的关系")])]),t._v("。标识符通常由字母和数字以及其它字符构成。")]),t._v(" "),a("p",[t._v("      关键字（或称保留字）是指在搜索引擎行业中，希望访问者了解的产品、服务或者公司等内容名称的用语。而在Java中指的是**"),a("span",{staticStyle:{color:"red"}},[t._v("对编译器有特殊意义的固定单词")]),a("strong",[t._v("，不能在程序中做其他目的使用。关键字具有专门的意义和用途，")]),a("span",{staticStyle:{color:"red"}},[t._v("和自定义的标识符不同，不能当作一般的标识符来使用")]),t._v("**！")]),t._v(" "),a("p",[a("strong",[t._v("一、主体不同")]),t._v(" "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("关键字")])]),t._v(" 属于保留字，是整个语言范围内预先保留的标识符。")]),t._v(" "),a("p",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("一般标识符")])]),t._v(" 是用户编程时使用的名字，用于给变量、常量、函数、语句块、方法名等命名，以建立起名称与使用之间的关系。")]),t._v(" "),a("p",[a("strong",[t._v("二、特点不同")]),t._v(" "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v(" 关键字")])]),t._v(" 不能声明与关键字同名的标识符。")]),t._v(" "),a("p",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v(" 一般标识符")])]),t._v(" 由字母和数字以及其它字符构成。")]),t._v(" "),a("p",[a("strong",[t._v("三、规则不同")]),t._v(" "),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("      关键字")])]),t._v(" 经过预处理后，关键字从预处理记号(preprocessing-token)中区别出来，剩下的标识符作为记号(token)，用于声明对象、函数、类型、命名空间等。")]),t._v(" "),a("p",[a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("    一般标识符")])]),t._v(" 长度是由机器上的编译系统决定的，一般的限制为8字符。")]),t._v(" "),a("h3",{attrs:{id:"java语言关键字有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java语言关键字有哪些"}},[t._v("#")]),t._v(" Java语言关键字有哪些？")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("分类")]),t._v(" "),a("th",[t._v("关键字")]),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th"),t._v(" "),a("th")])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("访问控制")]),t._v(" "),a("td",[t._v("private")]),t._v(" "),a("td",[t._v("protected")]),t._v(" "),a("td",[t._v("public")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("类，方法和变量修饰符")]),t._v(" "),a("td",[t._v("abstract")]),t._v(" "),a("td",[t._v("class")]),t._v(" "),a("td",[t._v("extends")]),t._v(" "),a("td",[t._v("final")]),t._v(" "),a("td",[t._v("implements")]),t._v(" "),a("td",[t._v("interface")]),t._v(" "),a("td",[t._v("native")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("new")]),t._v(" "),a("td",[t._v("static")]),t._v(" "),a("td",[t._v("strictfp")]),t._v(" "),a("td",[t._v("synchronized")]),t._v(" "),a("td",[t._v("transient")]),t._v(" "),a("td",[t._v("volatile")]),t._v(" "),a("td",[t._v("enum")])]),t._v(" "),a("tr",[a("td",[t._v("控制程序")]),t._v(" "),a("td",[t._v("break")]),t._v(" "),a("td",[t._v("continue")]),t._v(" "),a("td",[t._v("return")]),t._v(" "),a("td",[t._v("do")]),t._v(" "),a("td",[t._v("while")]),t._v(" "),a("td",[t._v("if")]),t._v(" "),a("td",[t._v("else")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("for")]),t._v(" "),a("td",[t._v("instance of")]),t._v(" "),a("td",[t._v("switch")]),t._v(" "),a("td",[t._v("case")]),t._v(" "),a("td",[t._v("default")]),t._v(" "),a("td",[t._v("assert")]),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("错误处理")]),t._v(" "),a("td",[t._v("try")]),t._v(" "),a("td",[t._v("catch")]),t._v(" "),a("td",[t._v("throw")]),t._v(" "),a("td",[t._v("throws")]),t._v(" "),a("td",[t._v("finally")]),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("包相关")]),t._v(" "),a("td",[t._v("import")]),t._v(" "),a("td",[t._v("package")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("基本类型")]),t._v(" "),a("td",[t._v("byte")]),t._v(" "),a("td",[t._v("short")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("long")]),t._v(" "),a("td",[t._v("float")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("boolean")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[t._v("char")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("变量引用")]),t._v(" "),a("td",[t._v("super")]),t._v(" "),a("td",[t._v("this")]),t._v(" "),a("td",[t._v("void")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")]),t._v(" "),a("tr",[a("td",[t._v("保留字")]),t._v(" "),a("td",[t._v("goto")]),t._v(" "),a("td",[t._v("const")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td")])])]),t._v(" "),a("blockquote",[a("p",[t._v("Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。")]),t._v(" "),a("p",[a("code",[t._v("default")]),t._v(" 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。")]),t._v(" "),a("ul",[a("li",[t._v("在程序控制中，当在 "),a("code",[t._v("switch")]),t._v(" 中匹配不到任何情况时，可以使用 "),a("code",[t._v("default")]),t._v(" 来编写默认匹配的情况。")]),t._v(" "),a("li",[t._v("在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 "),a("code",[t._v("default")]),t._v(" 关键字来定义一个方法的默认实现。")]),t._v(" "),a("li",[t._v("在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 "),a("code",[t._v("default")]),t._v("，但是这个修饰符加上了就会报错。")])])]),t._v(" "),a("p",[t._v("⚠️注意 ：虽然 "),a("code",[t._v("true")]),t._v(", "),a("code",[t._v("false")]),t._v(", 和 "),a("code",[t._v("null")]),t._v(" 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用")]),t._v(" "),a("h3",{attrs:{id:"自增自减运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自增自减运算符"}},[t._v("#")]),t._v(" 自增自减运算符")]),t._v(" "),a("p",[t._v("      在写代码的过程中，常见的一种情况是需要某个整数类型变量增加1或减少1，Java提供了一种特的运算符，用于这种表达式，叫做"),a("span",{staticStyle:{color:"red"}},[t._v("自增运算符（++）和自减运算符（--）")]),t._v("。")]),t._v(" "),a("p",[t._v("      ++和--运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时（前缀），先自增/减，再赋值；当运算符在变量之后（后缀），先赋值，再自增/减。例如"),a("code",[t._v("b = ++a")]),t._v("时，先自增（自己增加1），再赋值（赋值给b）；当"),a("code",[t._v("b = a++")]),t._v("时，先赋值（赋值给b），再自增（自己增加1）。"),a("span",{staticStyle:{color:"red"}},[t._v('也就是++a输出的是a+1的值，a++输出的是a值。用一句口诀就是："符号在前面先加/减，符号在后面就后加/减"。')])]),t._v(" "),a("p",[t._v("先自增后赋值")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-8.png",alt:"image-20220712092241657"}})]),t._v(" "),a("p",[t._v("先赋值后自增")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a="')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-9.png",alt:"image-20220712092302779"}})]),t._v(" "),a("h3",{attrs:{id:"continue、break-和-return-的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#continue、break-和-return-的区别是什么"}},[t._v("#")]),t._v(" continue、break 和 return 的区别是什么？")]),t._v(" "),a("p",[t._v("      在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，，当发生了某种条件之后，提前终止循环，这就需要用到下面几个关键字：")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("continue")]),t._v("：当跳出当前的这一次循环，继续进行下一次循环")]),t._v(" "),a("li",[a("code",[t._v("break")]),t._v("：指跳出整个循环体，继续执行循环下面的语句")]),t._v(" "),a("li",[a("code",[t._v("return")]),t._v("：用于跳出所在方法，结束该方法的运行。return一般有两种用法：\n"),a("ol",[a("li",[a("code",[t._v("return")]),t._v("：直接使用return结束方法执行，用于没有返回值函数的方法")]),t._v(" "),a("li",[a("code",[t._v("return value")]),t._v("：return一个特定值，用于有返回值函数的方法")])])])]),t._v(" "),a("p",[t._v("思考一下：下列语句的运行结果是？")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//跳出当前的这一次循环，继续进行下一次循环")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                flag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//跳出整个循环体，继续执行循环下面的语句")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xixi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("flag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"haha"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"heihei"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("p",[t._v("运行结果：")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-10.png",alt:"image-20220712093615654"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-11.gif",alt:"debug"}})]),t._v(" "),a("h2",{attrs:{id:"方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[t._v("#")]),t._v(" 方法")]),t._v(" "),a("h3",{attrs:{id:"什么是方法的返回值-方法有哪几种类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是方法的返回值-方法有哪几种类型"}},[t._v("#")]),t._v(" 什么是方法的返回值?方法有哪几种类型？")]),t._v(" "),a("p",[a("strong",[t._v("方法的返回值")]),t._v(" 是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用是接收出结果，使得它可以用于其他的操作！")]),t._v(" "),a("p",[t._v("我们可以按照方法的返回值和参数类型将方法分为下面这几种：")]),t._v(" "),a("p",[a("strong",[t._v("1.无参数无返回值的方法")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下面这个方法也没有返回值，虽然用到了 return")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示结束方法的执行,下方的输出语句不会执行")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[a("strong",[t._v("2.有参数无返回值的方法")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parameter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Parameter")]),t._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("strong",[t._v("3.有返回值无参数的方法")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("strong",[t._v("4.有返回值有参数的方法")])]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"静态方法为什么不能调用非静态成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法为什么不能调用非静态成员"}},[t._v("#")]),t._v(" 静态方法为什么不能调用非静态成员?")]),t._v(" "),a("p",[t._v("这个需要结合 JVM 的相关知识，主要原因如下：")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("静态方法是属于类的")]),t._v("，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。")]),t._v(" "),a("li",[t._v("在类的非静态成员不存在的时候静态成员就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。")])]),t._v(" "),a("h3",{attrs:{id:"静态方法和实例方法有何不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法和实例方法有何不同"}},[t._v("#")]),t._v(" 静态方法和实例方法有何不同？")]),t._v(" "),a("p",[a("strong",[t._v("1、调用方式")])]),t._v(" "),a("p",[t._v("      在外部调用静态方法时，可以使用"),a("code",[t._v("类名.方法名")]),t._v("的方式，也可以使用"),a("code",[t._v("对象.方法名")]),t._v("的方式，而实例方法只有后面这种方式。也就是说,"),a("span",{staticStyle:{color:"red"}},[a("strong",[t._v("调用静态方法可以无需创建对象。")])])]),t._v(" "),a("p",[t._v("      不过，需要注意的是一般不建议使用"),a("code",[t._v("对象.方法名")]),t._v("的方式来调用静态方法。这种方式非常容易造成混淆，静态方法不属于类的某个对象而是属于这个类。")]),t._v(" "),a("p",[t._v("      因此，一般建议使用"),a("code",[t._v("类名.方法名")]),t._v("的方式来调用方法。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staicMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//......")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用实例方法")]),t._v("\n        person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("method")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用静态方法")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staicMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[a("strong",[t._v("2、访问类成员是否存在限制")])]),t._v(" "),a("p",[t._v("      静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），而实例方法不存在这个限制。")]),t._v(" "),a("h2",{attrs:{id:"基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型"}},[t._v("#")]),t._v(" 基本数据类型")]),t._v(" "),a("h3",{attrs:{id:"java有哪些数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java有哪些数据类型"}},[t._v("#")]),t._v(" Java有哪些数据类型？")]),t._v(" "),a("p",[t._v("Java语言的数据类型分为两种："),a("strong",[a("span",{staticStyle:{color:"red"}},[t._v("基本数据类型和引用数据类型")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"http://yz-typora-img.oss-cn-shanghai.aliyuncs.com/img/Java%E5%9F%BA%E7%A1%80%E5%B8%B8%E8%A7%81%E7%9F%A5%E8%AF%86&%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93-3.png",alt:"image-20220628143345898"}})]),t._v(" "),a("p",[t._v("1、基本数据类型包括byte（字节型）、short（短整型）、int（整型）、long（长型）、float（单精度浮点型）、double（双精度浮点型）、char（字符型）、boolean（布尔型）共八种，如下表所示。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("基本类型")]),t._v(" "),a("th",[t._v("位数")]),t._v(" "),a("th",[t._v("字节")]),t._v(" "),a("th",[t._v("默认值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("byte")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("short")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("32")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("long")]),t._v(" "),a("td",[t._v("64")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("0L")])]),t._v(" "),a("tr",[a("td",[t._v("float")]),t._v(" "),a("td",[t._v("32")]),t._v(" "),a("td",[t._v("4")]),t._v(" "),a("td",[t._v("0f")])]),t._v(" "),a("tr",[a("td",[t._v("double")]),t._v(" "),a("td",[t._v("64")]),t._v(" "),a("td",[t._v("8")]),t._v(" "),a("td",[t._v("0d")])]),t._v(" "),a("tr",[a("td",[t._v("char")]),t._v(" "),a("td",[t._v("16")]),t._v(" "),a("td",[t._v("2")]),t._v(" "),a("td",[t._v("'u0000'")])]),t._v(" "),a("tr",[a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("1")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("false")])])])]),t._v(" "),a("p",[t._v("      对于boolean，官方文档未明确定义，它依赖于JVM厂商的具体实现。逻辑上理解是占用1位，但是实际中会考虑计算机高效存储因素。")]),t._v(" "),a("p",[t._v("      Java虚拟机规范讲到：在JVM中并没有提供boolean专用的字节码指令，而boolean类型数据在经过编译后在JVM中会通过int类型来表示，此时boolean数据4字节32位，而boolean数组会将编译成Java虚拟机的byte数组，此时每个boolean数据1字节占8bit。")]),t._v(" "),a("div",{staticClass:"custom-block note"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("ol",[a("li",[t._v("Java里使用long类型的数据一定要在数值后面加上L，否则将会作为整数解析；")]),t._v(" "),a("li",[a("code",[t._v("char a = 'h'")]),t._v("char：单引号，"),a("code",[t._v('String a = "hello"')]),t._v(":双引号")])])]),t._v(" "),a("p",[t._v("2、引用数据类型建立在基础数据类型的基础上，包括数组、类和接口。引用数据类型是由用户自定义，用来限制其他数据的类型。另外Java语言中不支持C++的指针类型、结构类型、联合类型和枚举类型。")]),t._v(" "),a("h3",{attrs:{id:"switch是否能作用在byte上-是否作用在long上-是否能作用在string上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch是否能作用在byte上-是否作用在long上-是否能作用在string上"}},[t._v("#")]),t._v(" switch是否能作用在byte上，是否作用在long上，是否能作用在String上？")]),t._v(" "),a("p",[t._v("      Java5以前switch（expr）中，expr只能是byte、short、int、char。")]),t._v(" "),a("p",[t._v("      从Java5开始，Java中引入了枚举类型，expr也可以是enum类型。")]),t._v(" "),a("p",[t._v("      从Java7开始，expr还可以是字符串（String），但是长整型（long）在目前所有版本中都是不可以的")]),t._v(" "),a("h2",{attrs:{id:"关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[t._v("#")]),t._v(" 关键字")]),t._v(" "),a("h3",{attrs:{id:"final、finally、finalize的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#final、finally、finalize的区别"}},[t._v("#")]),t._v(" final、finally、finalize的区别？")]),t._v(" "),a("p",[t._v("final用于修饰变量、方法和类。")]),t._v(" "),a("ul",[a("li",[t._v("final变量：被修饰的的变量不可改变，不可变为"),a("span",{staticStyle:{color:"orange"}},[a("code",[t._v("引用不可变")])]),t._v("和"),a("span",{staticStyle:{color:"orange"}},[a("code",[t._v("对象不可变")])]),t._v("，final指的是"),a("span",{staticStyle:{color:"orange"}},[a("code",[t._v("引用不可变")])]),t._v(",final修饰的变量必须初始化，通常成被修饰的变量为"),a("span",{staticStyle:{color:"orange"}},[a("code",[t._v("常量")])]),t._v("。")]),t._v(" "),a("li",[t._v("final方法：被修饰的方法不允许任何子类重写，子类可以使用该方法")]),t._v(" "),a("li",[t._v("final类：被修饰的类不能被继承，所有方法不能被重写")])]),t._v(" "),a("p",[t._v("finally作为异常处理的一部分，它只能在"),a("span",{staticStyle:{color:"orange"}},[a("code",[t._v("try/catch")])]),t._v("语句中，并且附带一个语句块表示这段语句最终一定被执行（无论是否抛出异常），"),a("strong",[t._v("经常被用在需要释放资源的情况下")]),t._v("，"),a("span",{staticStyle:{color:"orange"}},[a("code",[t._v("System.exit(0)")])]),t._v("可以阻断finally执行。")]),t._v(" "),a("p",[t._v("finalize是在"),a("span",{staticStyle:{color:"orange"}},[a("code",[t._v("java.lang.Object")])]),t._v("里定义的方法，也就是说每一个对象都有这么个方法，这个方法在gc启动，该对象被回收时候被调用。")]),t._v(" "),a("p",[t._v("一个对象的finalize方法智慧被调用一次，finalize被调用不一定会立即回收该对象，所以有可能调用finalize后，该对象又不需要被回收了，然后到了真正要被回收的时候，因为前面调用过一次，所以不会再次调用finalize了，进而产生问题，"),a("strong",[t._v("因此不推荐使用finalize方法。")])]),t._v(" "),a("h3",{attrs:{id:"为什么要用static关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用static关键字"}},[t._v("#")]),t._v(" 为什么要用static关键字?")]),t._v(" "),a("p",[t._v("通常来说，用new创建的对象时，数据存储空间才被分配，方法才供外界调用。但有时我们只想为特定域分配单一存储空间，不考虑要创建多少对象或者说根本不创建任何对象，再就是我们想在没有创建对象的情况下调用方法。在这两种情况下，static关键字，满足了我们的需求。")]),t._v(" "),a("h3",{attrs:{id:"static-关键字是什么意思-java中是否可以覆盖一个private或者static的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-关键字是什么意思-java中是否可以覆盖一个private或者static的方法"}},[t._v("#")]),t._v(' "static"关键字是什么意思？Java中是否可以覆盖一个private或者static的方法？')]),t._v(" "),a("p",[t._v('"static"关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。')]),t._v(" "),a("p",[t._v("Java中"),a("span",{staticStyle:{color:"red"}},[t._v("static方法不能被覆盖")]),t._v("，"),a("strong",[t._v("因为方法覆盖是基于运行时动态绑定的")]),t._v("，而static方法是编译时静态绑定的。static方法跟类的任何示例都不相关，所以概念上不适用。")]),t._v(" "),a("h3",{attrs:{id:"是否可以在static环境中访问非static变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#是否可以在static环境中访问非static变量"}},[t._v("#")]),t._v(" 是否可以在static环境中访问非static变量？")]),t._v(" "),a("p",[t._v("static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错。因为这些变量还没有被创建出来，还没有跟任何示例关联上。")]),t._v(" "),a("h3",{attrs:{id:"static静态方法能不能引用菲静态资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static静态方法能不能引用菲静态资源"}},[t._v("#")]),t._v(" static静态方法能不能引用菲静态资源？")]),t._v(" "),a("p",[t._v("不能，new的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它。")]),t._v(" "),a("h3",{attrs:{id:"java静态变量、代码块和静态方法的执行顺序是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java静态变量、代码块和静态方法的执行顺序是什么"}},[t._v("#")]),t._v(" Java静态变量、代码块和静态方法的执行顺序是什么？")]),t._v(" "),a("p",[t._v("基本上代码块分为三种：static静态代码块、构造代码块、普通代码块")]),t._v(" "),a("p",[t._v("代码块执行顺序:"),a("strong",[t._v("静态代码块")]),t._v("--\x3e"),a("strong",[t._v("构造代码块")]),t._v("--\x3e"),a("strong",[t._v("构造函数")]),t._v("--\x3e"),a("strong",[t._v("普通代码块")])]),t._v(" "),a("p",[t._v("继承中代码块执行顺序："),a("strong",[t._v("父类静态块")]),t._v("--\x3e"),a("strong",[t._v("子类静态块")]),t._v("--\x3e"),a("strong",[t._v("父类代码块")]),t._v("--\x3e"),a("strong",[t._v("父类构造器")]),t._v("--\x3e"),a("strong",[t._v("子类代码块")]),t._v("--\x3e"),a("strong",[t._v("子类构造器")])]),t._v(" "),a("p",[t._v("想要深入了解，可以参考这篇文章 ："),a("a",{attrs:{href:"https://juejin.cn/post/6844903986475040781",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.cn/post/6844903986475040781"),a("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=r.exports}}]);